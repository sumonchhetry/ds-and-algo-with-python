Q. What is an array ?
A. An array is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).

In computer science, an array is a data structure consisting of a collection of elements, each identified by at least one array index or key. An array is stored such that the position of each element can be computed from its index by a mathematical formula.

Array can store data of specific type.
Elements of an array are located in contiguous.
Each element of an array has a unique index.
The size of an array is predefined and cannot be modified.

**Types of Array
Q.    One dimensional array : an array with a bunch of values having been declared with a single index.
    ex. a[i] between 0 and n.

    Two dimensional array : an array with a bunch of values having been declared with a double index.
    ex. a[i][j] i and j between o and n. first row then collumn.

    Three dimensional array : an array with a bunch of values having been declared with a triple index.
    ex. a[i][j][k] i, j and k between o and n. first depth then row then collumn.

** Creating an array
Assign it to a variable
Define of element that it will stored
Define it's size (the maximum numbers of element)

*** Time and Space complexity in 2D array

Operation                               | Time Complexity   | Space Complexity
Creating an Empty Array                 | O(1)              | O(mn)
Inserting acollumn or row in an array   | O(mn)/O(1)        | O(1)
Traversing a given array                | O(mn)             | O(1)
Accessing a given array                 | O(1)              | O(1)
Searching a given array                 | O(mn)             | O(1)
Deleting a given array                  | O(mn)/O(1)        | O(1)

When to use array
- To store multiple variables of same data type
- Random Access


When to avoid array
- Same data type elements
- Reserve memory
